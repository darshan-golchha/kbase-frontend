{"ast":null,"code":"var _jsxFileName = \"D:\\\\OneDrive\\\\OneDrive - nucleusonline\\\\Documents\\\\Kbase\\\\kbase-frontend\\\\src\\\\services\\\\CSVRenderer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport useAxiosPrivate from '../hooks/useAxiosPrivate';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CSVRenderer = _ref => {\n  _s();\n  let {\n    csvUrl\n  } = _ref;\n  const [csvData, setCsvData] = useState('');\n  const axiosPrivate = useAxiosPrivate();\n  useEffect(() => {\n    const fetchCSVData = async () => {\n      try {\n        const response = await axiosPrivate(csvUrl);\n        const text = await response.text();\n        setCsvData(text);\n      } catch (error) {\n        console.error('Error fetching CSV data:', error);\n      }\n    };\n    fetchCSVData();\n  }, [csvUrl]);\n  const renderCsvData = () => {\n    const parsedData = Papa.parse(csvData, {\n      header: true // Treat the first row as headers\n    });\n\n    if (parsedData.errors.length === 0) {\n      const rows = parsedData.data.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: Object.values(row).map((value, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n          children: value\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this))\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this));\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: parsedData.meta.fields.map((field, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: field\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: rows\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this);\n    } else {\n      // Handle CSV parsing errors if any\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Failed to parse CSV data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 14\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: csvData ? renderCsvData() : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading CSV data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 36\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(CSVRenderer, \"ep/IuHI84TbSp3G6RNZwGcNoIy4=\", false, function () {\n  return [useAxiosPrivate];\n});\n_c = CSVRenderer;\nexport default CSVRenderer;\nvar _c;\n$RefreshReg$(_c, \"CSVRenderer\");","map":{"version":3,"names":["React","useState","useEffect","useAxiosPrivate","Papa","jsxDEV","_jsxDEV","CSVRenderer","_ref","_s","csvUrl","csvData","setCsvData","axiosPrivate","fetchCSVData","response","text","error","console","renderCsvData","parsedData","parse","header","errors","length","rows","data","map","row","index","children","Object","values","value","colIndex","fileName","_jsxFileName","lineNumber","columnNumber","meta","fields","field","_c","$RefreshReg$"],"sources":["D:/OneDrive/OneDrive - nucleusonline/Documents/Kbase/kbase-frontend/src/services/CSVRenderer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport useAxiosPrivate from '../hooks/useAxiosPrivate';\r\nimport Papa from 'papaparse';\r\n\r\n\r\nconst CSVRenderer = ({ csvUrl }) => {\r\n  const [csvData, setCsvData] = useState('');\r\n  const axiosPrivate = useAxiosPrivate();\r\n\r\n  useEffect(() => {\r\n    const fetchCSVData = async () => {\r\n      try {\r\n        const response = await axiosPrivate(csvUrl);\r\n        const text = await response.text();\r\n        setCsvData(text);\r\n      } catch (error) {\r\n        console.error('Error fetching CSV data:', error);\r\n      }\r\n    };\r\n\r\n    fetchCSVData();\r\n  }, [csvUrl]);\r\n\r\n  const renderCsvData = () => {\r\n    const parsedData = Papa.parse(csvData, {\r\n      header: true, // Treat the first row as headers\r\n    });\r\n\r\n    if (parsedData.errors.length === 0) {\r\n      const rows = parsedData.data.map((row, index) => (\r\n        <tr key={index}>\r\n          {Object.values(row).map((value, colIndex) => (\r\n            <td key={colIndex}>{value}</td>\r\n          ))}\r\n        </tr>\r\n      ));\r\n\r\n      return (\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              {parsedData.meta.fields.map((field, index) => (\r\n                <th key={index}>{field}</th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>{rows}</tbody>\r\n        </table>\r\n      );\r\n    } else {\r\n      // Handle CSV parsing errors if any\r\n      return <div>Failed to parse CSV data</div>;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {csvData ? renderCsvData() : <div>Loading CSV data...</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CSVRenderer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}